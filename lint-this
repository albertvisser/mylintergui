#! /usr/bin/env python3
import argparse
import pathlib
import subprocess

"""controleer alle python sources in de huidige directory
en stuur de output per stuk naar een file in ~/.linters/<linter>/

opties:

-l : specify linter(no default)
-r : recursive
"""
ROOT = pathlib.Path.home() / '.linters'
CMD = {
    'pylint': ('pylint3', '<src>'),
    'flake8': ('python3', '-m', 'flake8', '<src>')
    }

class Main():

    def __init__(self, args):
        self.here = pathlib.Path.cwd()
        self.linter = args.linter
        base = ROOT / self.linter / self.here.name
        self.scan(self.here, base, args.recursive)
        print('ready.')

    def scan(self, here, dest, recursive=False):
        """apply linter to files in directory
        """
        for item in here.iterdir():

            if item.is_file() and item.suffix == '.py':
                print('checking', item)
                command = [x for x in CMD[self.linter]]
                for ix, word in enumerate(command):
                    if word == '<src>':
                        command[ix] = str(here / item)
                ## print('TODO:', ' '.join([str(x) for x in command]))
                out = dest / item.relative_to(self.here)
                if not out.parent.exists():
                    out.parent.mkdir(parents=True)
                with out.open('w') as _out:
                    subprocess.run(command, stdout=_out)

            elif item.is_dir() and recursive:
                self.scan(item, dest, recursive)

parser = argparse.ArgumentParser(description='Another linter frontend')
parser.add_argument('-l', '--linter', choices=['pylint', 'flake8'], required=True)
parser.add_argument('-r', '--recursive', action='store_true')
args = parser.parse_args()
result = Main(args)

